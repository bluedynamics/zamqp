AMQP Convenience
================

Create AMQP properties for connection.
::

    >>> from zamqp import AMQPProps
    >>> props = AMQPProps()
    >>> props
    <zamqp._api.AMQPProps object at ...>

Create connection.
::
    
    >>> from zamqp import AMQPConnection
    >>> connection = AMQPConnection('zamqp_queue', props)
    >>> connection
    <zamqp._api.AMQPConnection object at ...>
    
    >>> connection.channel
    <amqplib.client_0_8.channel.Channel object at ...>
    
    >>> connection.close()

Dummy callback.
::

    >>> class Callback(object):
    ... 
    ...     def __init__(self, messages):
    ...         self.messages = messages
    ... 
    ...     def __call__(self, message):
    ...         self.messages.append(message)
    
    >>> messages = list()
    >>> callback = Callback(messages)

Create consumer thread.
::

    >>> from zamqp import AMQPConsumer
    >>> from zamqp import AMQPThread
    >>> consumer = AMQPConsumer('zamqp_queue', AMQPProps(), callback)
    >>> amqpthread = AMQPThread()
    >>> amqpthread.consumer = consumer
    >>> amqpthread.start()

And a second consumer thread.
::

    >>> consumer2 = AMQPConsumer('zamqp_queue', AMQPProps(), callback)
    >>> amqpthread2 = AMQPThread()
    >>> amqpthread2.consumer = consumer2
    >>> amqpthread2.start()

Create producer and send some messages.
::

    >>> from zamqp import AMQPProducer
    >>> producer = AMQPProducer('zamqp_queue', AMQPProps())
    >>> producer('1')
    >>> producer('2')
    >>> producer(dict([(1, 1)]))
    >>> producer.close()

Short wait for everything to be done.
::

    >>> import time
    >>> time.sleep(0.1)

Check received messages by callback.
::

    >>> messages
    ['1', '2', {1: 1}, '1', '2', {1: 1}]

Shutdown.
::

    >>> amqpthread.close()
    >>> amqpthread2.close()